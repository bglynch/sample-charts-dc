title: Bar Charts
---
body:
<section>
    <div class="row">
        <div class="col-12">
            <div class="row">
              <ul class="list-group col-1">
                <li class="list-group-item list-header">Mixins</li>
                <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/BaseMixin.html">BaseMixin</a></li>
                <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/MarginMixin.html">MarginMixin</a></li>
                <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/ColorMixin.html">ColorMixin</a></li>
                <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/CoordinateGridMixin.html">CoordinateGridMixin</a></li>
                <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/StackMixin.html">StackMixin</a></li>
              </ul>
              <ul class="list-group col-1">
                <li class="list-group-item list-header">Methods</li>
                <li class="list-group-item"><strong>centerBar</strong></li>
                <li class="list-group-item"><strong>alwaysUseRounding</strong></li>
                <li class="list-group-item"><strong>barPadding</strong></li>
                <li class="list-group-item"><strong>gap</strong></li>
                <li class="list-group-item"><strong>outerPadding</strong></li>
              </ul>
              <ul class="list-group col-1">
                <li class="list-group-item list-header">Accepts</li>
                <li class="list-group-item">Boolean</li>
                <li class="list-group-item">Boolean</li>
                <li class="list-group-item">Number</li>
                <li class="list-group-item">Number</li>
                <li class="list-group-item">Number</li>
              </ul>
              <ul class="list-group col-1">
                <li class="list-group-item list-header">Default</li>
                <li class="list-group-item">false</li>
                <li class="list-group-item">false</li>
                <li class="list-group-item">0</li>
                <li class="list-group-item">2</li>
                <li class="list-group-item">0.5</li>
              </ul>
              <ul class="list-group col-6">
                <li class="list-group-item list-header">Method Descriptions</li>
                <li class="list-group-item">whether bar chart will render each bar centered around the data position on the x-axis</li>
                <li class="list-group-item">set whether rounding is enabled when bars are centered(no effect if bars are not centered)</li>
                <li class="list-group-item">set spacing between bars as fraction of bar size(Valid values are between 0-1)</li>
                <li class="list-group-item">set fixed gap(in px) between bars</li>
                <li class="list-group-item">set outer padding on ordinal bar chart(has no effect on non-ordinal charts)</li>
              </ul>
            </div>
      
          </div>
          
        <div class="col-6">
            <p>This is a basic Ordinal Bar Chart</p>
            <div id="bar01" class="custom-chart"></div>
            <pre><code class="language-javascript indentFix">barChart01
              .dimension(ageGroupDimension)
              .group(ageGroupDimension.group())
              .width($(barChart01.anchor()).parent().width())
              .height(200)
              .x(d3.scaleBand())
              .xUnits(dc.units.ordinal)
              .yAxisLabel("Count")
              .xAxisLabel("Age Bracket");
            </code></pre>
        </div>
        <div class="col-6">
            <p>This is a basic Numerical Bar Chart</p>
            <div id="bar02" class="custom-chart"></div>
            <pre data-line=""><code class="language-javascript indentFix">barChart02
              .dimension(ageDimension)
              .group(ageGroup)
              .width($(barChart02.anchor()).parent().width())
              .height(200)
              .x(d3.scaleLinear().domain([15, 70]))
              .yAxisLabel("Count")
              .xAxisLabel("Age");
              
            </code></pre>
        </div>
        <div class="col-3">
            <div id="bar03" class="custom-chart"></div>
            <pre data-line="10"><code class="language-javascript indentFix" >barChart03
              .dimension(ageGroupDimension)
              .group(ageGroupDimension.group())
              .width($(barChart01.anchor()).parent().width()/2)
              .height(200)
              .x(d3.scaleBand())
              .xUnits(dc.units.ordinal)
              .yAxisLabel("Count")
              .xAxisLabel("Age Bracket")
              .barPadding(.5);
            </code></pre>
            <dl class="description-text">
                <dt>.barPadding</dt>
                <dd>- Shows when hovering over a bar.</dd>
            </dl>
        </div>
        <div class="col-3">
            <div id="bar04" class="custom-chart"></div>
            <pre data-line="10"><code class="language-javascript indentFix">barChart04
              .dimension(ageGroupDimension)
              .group(ageGroupDimension.group())
              .width($(barChart01.anchor()).parent().width()/2)
              .height(200)
              .x(d3.scaleBand())
              .xUnits(dc.units.ordinal)
              .yAxisLabel("Count")
              .xAxisLabel("Age Bracket")
              .gap(20);
            </code></pre>
            <dl class="description-text">
                <dt>.gap</dt>
                <dd>- Get or set the spacing between bars as a fraction of bar size</dd>
            </dl>
        </div>
        <div class="col-3">
            <div id="bar05" class="custom-chart"></div>
            <pre data-line="11"><code class="language-javascript indentFix">
                barChart05
                    .dimension(genderDimension)
                    .group(genderGroup)
                    .width($(barChart05.anchor()).parent().width())
                    .height(200)
                    .yAxisLabel("Count")
                    .xAxisLabel("Sex")
                    .x(d3.scaleOrdinal())
                    .xUnits(dc.units.ordinal)
                    .gap(50);
            </code></pre>
            <dl class="description-text">
                <dt>.gap</dt>
                <dd>- Manually set fixed gap (in px) between bars</dd>
            </dl>
        </div>
        <div class="col-3">
            <div id="bar06" class="custom-chart"></div>
            <pre data-line="11,12"><code class="language-javascript indentFix" >
                barChart06
                    .dimension(genderDimension)
                    .group(genderGroup)
                    .width($(barChart06.anchor()).parent().width())
                    .height(200)
                    .yAxisLabel("Count")
                    .xAxisLabel("Sex")
                    .x(d3.scaleOrdinal())
                    .xUnits(dc.units.ordinal)
                    .barPadding(0.1)
                    .outerPadding(2);
            </code></pre>
            <dl class="description-text">
                <dt>.outerPadding</dt>
                <dd>- Get or set the outer padding on an ordinal bar chart<br>
                    - Will pad the width by padding * barWidth on each side of the chart</dd>
            </dl>
        </div>
        <div class="col-6">
          <div id="bar07" class="custom-chart"></div>
          <pre data-line=""><code class="language-javascript indentFix">barChart07
            .dimension(ageDimension)
            .group(ageDimensionGroup)
            .width($(barChart07.anchor()).parent().width())
            .height(200)
            .x(d3.scaleLinear().domain([17, 71]))
            .yAxisLabel("Count")
            .xAxisLabel("Age")
            .centerBar(true);
          </code></pre>
          <dl class="description-text">
            <dt>.centerBar</dt>
            <dd>- Manually set fixed gap (in px) between bars</dd>
        </dl>
      </div>
        <div class="col-6">
          <div id="bar08" class="custom-chart"></div>
          <pre data-line=""><code class="language-javascript indentFix">barChart08
            .dimension(ageDimension)
            .group(ageDimensionGroup)
            .width($(barChart08.anchor()).parent().width())
            .height(200)
            .x(d3.scaleLinear().domain([17, 71]))
            .yAxisLabel("Count")
            .xAxisLabel("Age")
            .centerBar(true)
            .round(function(n) { return Math.floor(n) + 0.5; })
            .alwaysUseRounding(true);
          </code></pre>
      </div>
        <div class="col-3">
          <div id="bar09" class="custom-chart"></div>
          <pre data-line="8,9,10,11,12,13,14"><code class="language-javascript indentFix">barChart09
            .dimension(genderDimension)
            .group(genderGroup)
            .width($(barChart09.anchor()).parent().width())
            .height(200)
            .x(d3.scaleBand())
            .xUnits(dc.units.ordinal)
            .y(d3.scaleLinear().domain([0, 600]))
            .on('renderlet', chart => {
              ...
              })
            .on('postRedraw', function (chart, filter) {
              let chartBars = chart.selectAll('.bar')._groups[0];
              });
          </code></pre>
      </div>
        <div class="col-3">
          <div id="bar10" class="custom-chart"></div>
          <pre data-line="8,9,10,11"><code class="language-javascript indentFix">barChart10
            .dimension(genderDimension)
            .group(genderGroup)
            .width($(barChart10.anchor()).parent().width())
            .height(200)
            .x(d3.scaleBand())
            .xUnits(dc.units.ordinal)
            .y(d3.scaleLinear().domain([0, 600]))
            .label(function (d) {
              let all = ndx.groupAll().reduceCount().value();
              return d.data.value + " of " + all;});
          </code></pre>
      </div>
    </div>
</section>
---
scripts:
<script>
    var toFix = document.getElementsByClassName("indentFix");
    for (var elem = 0, elems = toFix.length; elem < elems; elem++) {
        var lines = toFix[elem].innerHTML.split("\n");
        var line = lines[1];
        var leadingSpaces = 1;
        while (line.charAt(leadingSpaces) == " ") { leadingSpaces++; }
        for (var i = 1, len = lines.length; i < len; i++) {
            lines[i] = lines[i].slice(leadingSpaces);
        }
        toFix[elem].innerHTML = lines.join("\n");
    }
</script>

<script language="javascript">
  /* global dc, crossfilter, d3 */
  d3.csv('../data/people.csv')
    .then(function (data) {
      // http://learnjsdata.com/read_data.html
      data.forEach(function (d) {
        if (d["CreditCardType"] == "") {
          d["CreditCardType"] = "no data"
        }
        d.age = ~~((Date.now() - new Date(d.DOB)) / (31557600000));
        d.ageGroup = roundDown(d.age, 10) + "'s'"
      });
      return data;
    })
    .then(function (data) {
      makeGraphs(data);
    })
    .catch(function (error) {
      console.log(error);
    });


    function makeGraphs(peopleData) {
      dc.config.defaultColors(d3.schemePaired);

      let ndx = crossfilter(peopleData);

      // create dimensions
      let genderDimension = ndx.dimension(function (data) { return data.gender; }),
        maritalDimension = ndx.dimension(function (data) { return data.MaritalStatus; }),
        creditCardDimension = ndx.dimension(function (data) { return data.CreditCardType; }),
        ageDimension = ndx.dimension(function (data) { return data.age; }),
        ageGroupDimension = ndx.dimension(function (data) { return data.ageGroup; });

      // create groups
      let genderGroup = genderDimension.group().reduceCount(),
        maritalGroup = maritalDimension.group().reduceCount(),
        creditCardGroup = creditCardDimension.group().reduceCount(),
        ageDimensionGroup = ageDimension.group();

      // instanciate the charts
      let barChart01 = dc.barChart('#bar01'),
        barChart02 = dc.barChart('#bar02'),
        barChart03 = dc.barChart('#bar03'),
        barChart04 = dc.barChart('#bar04'),
        barChart05 = dc.barChart('#bar05'),
        barChart06 = dc.barChart('#bar06'),
        barChart07 = dc.barChart('#bar07'),
        barChart08 = dc.barChart('#bar08'),
        barChart09 = dc.barChart('#bar09'),
        barChart10 = dc.barChart('#bar10');


      barChart01
        .dimension(ageGroupDimension)
        .group(ageGroupDimension.group())
        .width($(barChart01.anchor()).parent().width())
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .yAxisLabel("Count")
        .xAxisLabel("Age Bracket");

      barChart02
        .dimension(ageDimension)
        .group(ageDimensionGroup)
        .width($(barChart02.anchor()).parent().width())
        .height(200)
        .x(d3.scaleLinear().domain([15, 80]))
        .yAxisLabel("Count")
        .xAxisLabel("Age");

      barChart03
        .dimension(ageGroupDimension)
        .group(ageGroupDimension.group())
        .width($(barChart01.anchor()).parent().width() / 2)
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .yAxisLabel("Count")
        .xAxisLabel("Age Bracket")
        .barPadding(.5);

      barChart04
        .dimension(ageGroupDimension)
        .group(ageGroupDimension.group())
        .width($(barChart01.anchor()).parent().width() / 2)
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .yAxisLabel("Count")
        .xAxisLabel("Age Bracket")
        .gap(20);

      //    barChart04
      //      .dimension(genderDimension)
      //      .group(genderGroup)
      //      .width($(barChart04.anchor()).parent().width())
      //      .height(200)
      //      .yAxisLabel("Count")
      //      .xAxisLabel("Sex")
      //      .x(d3.scaleBand())
      //      .xUnits(dc.units.ordinal)
      //      .y(d3.scaleLinear().domain([0, 600]))
      //      .barPadding(0.1)
      //      .label(function (d) {
      //        var all = ndx.groupAll().reduceCount().value()
      //        return d.data.key + '(' + Math.floor(d.data.value / all * 100) + '%)';
      //      }
      //      );

      barChart05
        .dimension(genderDimension)
        .group(genderGroup)
        .width($(barChart05.anchor()).parent().width())
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .yAxisLabel("Count")
        .xAxisLabel("Sex")
        .barPadding(.1)
        ;

      barChart06
        .dimension(genderDimension)
        .group(genderGroup)
        .width($(barChart06.anchor()).parent().width())
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .yAxisLabel("Count")
        .xAxisLabel("Sex")
        .barPadding(.1)
        .outerPadding(.2);

      barChart07
        .dimension(ageDimension)
        .group(ageDimensionGroup)
        .width($(barChart07.anchor()).parent().width())
        .height(200)
        .x(d3.scaleLinear().domain([17, 71]))
        .yAxisLabel("Count")
        .xAxisLabel("Age")
        .centerBar(true);

      barChart08
        .dimension(ageDimension)
        .group(ageDimensionGroup)
        .width($(barChart08.anchor()).parent().width())
        .height(200)
        .x(d3.scaleLinear().domain([17, 71]))
        .yAxisLabel("Count")
        .xAxisLabel("Age")
        .centerBar(true)
        .round(function (n) { return Math.floor(n) + 0.5; })
        .alwaysUseRounding(true)
        ;

      barChart09
        .dimension(genderDimension)
        .group(genderGroup)
        .width($(barChart09.anchor()).parent().width())
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .y(d3.scaleLinear().domain([0, 600]))
        .on('renderlet', chart => {
          let barsData = [];
          let bars = chart.selectAll('.bar').each(d => barsData.push(d));
          //Remove old values (if found)
          d3.select(bars._groups[0][0].parentNode).select('#inline-labels')
            .remove();
          //Create group for labels
          let gLabels = d3
            .select(bars._groups[0][0].parentNode)
            .append('g')
            .attr('id', 'inline-labels');

          for (let i = bars._groups[0].length - 1; i >= 0; i--) {
            let b = bars._groups[0][i];
            //Only create label if bar height is tall enough
            if (+b.getAttribute('height') < 18 || b.classList.contains('deselected')) continue;

            gLabels
              .append('text')
              .text(
                Math.round(
                  (barsData[i].data.value * 100) /
                  ndx.groupAll().reduceCount().value()
                ) + '%'
              )
              .attr('x', +b.getAttribute('x') + b.getAttribute('width') / 2)
              .attr('y', +b.getAttribute('y') + 0)
              .attr('text-anchor', 'middle')
              .attr('fill', 'black');

            gLabels
              .append('text')
              .text(barsData[i].data.value)
              .attr('x', +b.getAttribute('x') + b.getAttribute('width') / 2)
              .attr('y', +b.getAttribute('y') + 20)
              .attr('text-anchor', 'middle')
              .attr('fill', 'white');
          }
        })
        .on('postRedraw', function (chart, filter) {
          let chartBars = chart.selectAll('.bar')._groups[0];
        });

      barChart10
        .dimension(genderDimension)
        .group(genderGroup)
        .width($(barChart10.anchor()).parent().width())
        .height(200)
        .x(d3.scaleBand())
        .xUnits(dc.units.ordinal)
        .y(d3.scaleLinear().domain([0, 600]))
        .label(function (d) {
          let all = ndx.groupAll().reduceCount().value();
          return d.data.value + " of " + all;}
          );

      dc.renderAll();
    };

  let roundDown = function (num, precision) {
    num = parseFloat(num);
    if (!precision) return num.toLocaleString();
    return (Math.floor(num / precision) * precision).toLocaleString();
  };

  function match_parent_width(chart) {
    return chart.selectAll()._parents[0].clientWidth;
  }
</script>