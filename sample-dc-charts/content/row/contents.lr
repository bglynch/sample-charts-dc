title: Row Charts
---
body:
<section>
  <div class="row">
    <div class="col-12">
      <div class="row">
        <ul class="list-group col-1">
          <li class="list-group-item list-header">Mixins</li>
          <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/BaseMixin.html">BaseMixin</a></li>
          <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/MarginMixin.html">MarginMixin</a></li>
          <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/ColorMixin.html">ColorMixin</a></li>
          <li class="list-group-item"><a href="http://dc-js.github.io/dc.js/docs/html/CapMixin.html">CapMixin</a></li>
        </ul>
        <ul class="list-group col-1">
          <li class="list-group-item list-header">Methods</li>
          <li class="list-group-item"><strong>elasticX</strong></li>
          <li class="list-group-item"><strong>fixedBarHeight</strong></li>
          <li class="list-group-item"><strong>gap</strong></li>
          <li class="list-group-item"><strong>labelOffsetX</strong></li>
          <li class="list-group-item"><strong>labelOffsetY</strong></li>
          <li class="list-group-item"><strong>renderTitleLabel</strong></li>
          <li class="list-group-item"><strong>titleLabelOffsetX</strong></li>
          <li class="list-group-item"><strong>x</strong></li>
          <li class="list-group-item"><strong>xAxis</strong></li>
        </ul>
        <ul class="list-group col-1">
          <li class="list-group-item list-header">Accepts</li>
          <li class="list-group-item">Boolean</li>
          <li class="list-group-item">Number</li>
          <li class="list-group-item">Number</li>
          <li class="list-group-item">Number</li>
          <li class="list-group-item">Number</li>
          <li class="list-group-item">Boolean</li>
          <li class="list-group-item">Number</li>
          <li class="list-group-item">d3.scale</li>
          <li class="list-group-item">d3.axis</li>
        </ul>
        <ul class="list-group col-6">
          <li class="list-group-item list-header">Method Descriptions</li>
          <li class="list-group-item">x axis will rescale to auto-fit the data range when filtered.</li>
          <li class="list-group-item">set the fixed bar height</li>
          <li class="list-group-item">set the vertical gap space between rows on a particular row chart instance</li>
          <li class="list-group-item">set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart</li>
          <li class="list-group-item">set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart</li>
          <li class="list-group-item">Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'</li>
          <li class="list-group-item">set the x offset (horizontal space between right edge of row and right edge or text</li>
          <li class="list-group-item">sets the x scale</li>
          <li class="list-group-item">sets the x axis for the row chart instance</li>
        </ul>
      </div>

    </div>
    <div class="col-3">
      <div id="rowChart01" class="custom-chart"></div>
      <pre data-line="9,10,11,12,13,14,15,16,17"><code class="language-javascript indentFix" >
        rowChart01
          .dimension(genderDimension)
          .group(genderGroup)
          .width($(rowChart01.anchor()).parent().width())
          .height(200);
      </code></pre>
      <dl class="description-text">
        <dt>..</dt>
        <dd>- Basic row chart</dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart02" class="custom-chart"></div>
      <pre data-line="7,8"><code class="language-javascript indentFix" >
        rowChart01
          .dimension(genderDimension)
          .group(genderGroup)
          .width($(rowChart01.anchor()).parent().width())
          .height(200)
          .elasticX(true)
          .gap(20);
      </code></pre>
      <dl class="description-text">
        <dt>elasticX</dt>
        <dd>- x axis will rescale to auto-fit the data range</dd>
        <dt>gap</dt>
        <dd>- set the vertical gap space between rows </dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart03" class="custom-chart"></div>
      <pre data-line="9,10,11,12,13,14,15,16,17"><code class="language-javascript indentFix" >
        rowChart01
          .dimension(genderDimension)
          .group(genderGroup)
          .width($(rowChart01.anchor()).parent().width())
          .height(200);
      </code></pre>
      <dl class="description-text">
        <dt>..</dt>
        <dd>- Basic row chart</dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart04" class="custom-chart"></div>
      <pre data-line="9,10,11,12,13,14,15,16,17"><code class="language-javascript indentFix" >
        rowChart01
          .dimension(genderDimension)
          .group(genderGroup)
          .width($(rowChart01.anchor()).parent().width())
          .height(200);
      </code></pre>
      <dl class="description-text">
        <dt>..</dt>
        <dd>- Basic row chart</dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart05" class="custom-chart"></div>
      <pre data-line="7,8"><code class="language-javascript indentFix" >
        rowChart05
          .dimension(genderDimension)
          .group(genderGroup)
          .width($(rowChart01.anchor()).parent().width())
          .height(200)
          .labelOffsetX(50)
          .labelOffsetY(50);
      </code></pre>
      <dl class="description-text">
        <dt>.labelOffsetX(<integer>)</dt><dd>- set the x offset for the labels in the row</dd>
        <dt>.labelOffsetY(<integer>)</dt><dd>- set the y offset for the labels in the row</dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart06" class="custom-chart"></div>
      <pre data-line="7,8"><code class="language-javascript indentFix" >
        rowChart06
          .dimension(maritalDimension)
          .group(maritalDimension.group())
          .width($(rowChart01.anchor()).parent().width())
          .height(200)
          .renderTitleLabel(true)
          .titleLabelOffsetX(20);
      </code></pre>
      <dl class="description-text">
        <dt>renderTitleLabel</dt>
        <dd>- show labels on the bars</dd>
        <dt>titleLabelOffsetX</dt>
        <dd>- offset the labels left</dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart07" class="custom-chart"></div>
      <pre data-line="7"><code class="language-javascript indentFix" >
        rowChart07
          .dimension(creditCardDimension)
          .group(creditCardGroup)
          .width($(rowChart01.anchor()).parent().width())
          .height(200)
          .cap(7);
      </code></pre>
      <dl class="description-text">
        <dt>cap(<integer>)</dt>
        <dd>- max number of rows</dd>
      </dl>
    </div>
    <div class="col-3">
      <div id="rowChart08" class="custom-chart"></div>
      <pre data-line="7,8,9,10"><code class="language-javascript indentFix" >
        rowChart08
          .dimension(ageGroupDimension)
          .group(ageGroupDimension.group())
          .width($(rowChart01.anchor()).parent().width())
          .height(200)
          .fixedBarHeight(13)
          .ordering(d =>  d.key )
          .colors(["#66c2a4", "#a04a4a"])
          .x(d3.scaleLog().base(2).domain([1, 200]).range([0,300]));
      </code></pre>
      <dl class="description-text">
        <dt>fixedBarHeight</dt><dd>- sets the height for the bars</dd>
        <dt>ordering</dt><dd>- set the ordering of the bars</dd>
        <dt>colors</dt><dd>- set colors for the bar</dd>
        <dt>x</dt><dd>- set the scale for the x axis. Set to Log scale above</dd>
      </dl>
    </div>
  </div>
</section>
---
scripts:
<script>
  var toFix = document.getElementsByClassName("indentFix");
  for (var elem = 0, elems = toFix.length; elem < elems; elem++) {
    var lines = toFix[elem].innerHTML.split("\n");
    var line = lines[1];
    var leadingSpaces = 1;
    while (line.charAt(leadingSpaces) == " ") { leadingSpaces++; }
    for (var i = 1, len = lines.length; i < len; i++) {
      lines[i] = lines[i].slice(leadingSpaces);
    }
    toFix[elem].innerHTML = lines.join("\n");
  }
</script>

<script language="javascript">
  /* global dc, crossfilter, d3 */
  d3.csv('../data/people.csv')
    .then(function (data) {
      // http://learnjsdata.com/read_data.html
      data.forEach(function (d) {
        if (d["CreditCardType"] == "") {
          d["CreditCardType"] = "no data"
        }
        d.age = ~~((Date.now() - new Date(d.DOB)) / (31557600000));
        d.ageGroup = roundDown(d.age, 10) + "'s'"
      });
      return data;
    })
    .then(function (data) {
      makeGraphs(data);
    })
    .catch(function (error) {
      console.log(error);
    });


  function makeGraphs(peopleData) {
    let ndx = crossfilter(peopleData);

    // create dimensions
    let genderDimension = ndx.dimension(function (data) { return data.gender; }),
      maritalDimension = ndx.dimension(function (data) { return data.MaritalStatus; }),
      creditCardDimension = ndx.dimension(function (data) { return data.CreditCardType; });
    ageGroupDimension = ndx.dimension(function (data) { return data.ageGroup; });

    // create groups
    let genderGroup = genderDimension.group().reduceCount(),
      maritalGroup = maritalDimension.group().reduceCount(),
      creditCardGroup = creditCardDimension.group().reduceCount();


    // instanciate the charts
    let rowChart01 = dc.rowChart('#rowChart01');
      rowChart02 = dc.rowChart('#rowChart02'),
      rowChart03 = dc.rowChart('#rowChart03'),
      rowChart04 = dc.rowChart('#rowChart04'),
      rowChart05 = dc.rowChart('#rowChart05'),
      rowChart06 = dc.rowChart('#rowChart06'),
      rowChart07 = dc.rowChart('#rowChart07'),
      rowChart08 = dc.rowChart('#rowChart08'),

    rowChart01
      .dimension(genderDimension)
      .group(genderGroup)
      .width($(rowChart01.anchor()).parent().width())
      .height(200);

    rowChart02
      .dimension(maritalDimension)
      .group(maritalDimension.group())
      .width($(rowChart01.anchor()).parent().width())
      .height(200)
      .elasticX(true)
      .gap(20);

    rowChart03
      .dimension(creditCardDimension)
      .group(creditCardGroup)
      .width($(rowChart01.anchor()).parent().width())
      .height(200);

    rowChart04
      .dimension(ageGroupDimension)
      .group(ageGroupDimension.group())
      .width($(rowChart01.anchor()).parent().width())
      .height(200);

    rowChart05
      .dimension(genderDimension)
      .group(genderGroup)
      .width($(rowChart01.anchor()).parent().width())
      .height(200)
      .labelOffsetX(50)
      .labelOffsetY(50);

    rowChart06
      .dimension(maritalDimension)
      .group(maritalDimension.group())
      .width($(rowChart01.anchor()).parent().width())
      .height(200)
      .renderTitleLabel(true)
      .titleLabelOffsetX(20);

    rowChart07
      .dimension(creditCardDimension)
      .group(creditCardGroup)
      .width($(rowChart01.anchor()).parent().width())
      .height(200)
      .cap(7);

    rowChart08
      .dimension(ageGroupDimension)
      .group(ageGroupDimension.group())
      .width($(rowChart01.anchor()).parent().width())
      .height(200)
      .fixedBarHeight(13)
      .ordering(d =>  d.key )
      .colors(["#66c2a4", "#a04a4a"])
      .x(d3.scaleLog().base(2).domain([1, 200]).range([0,300]));

    dc.renderAll();
  };

  let roundDown = function (num, precision) {
    num = parseFloat(num);
    if (!precision) return num.toLocaleString();
    return (Math.floor(num / precision) * precision).toLocaleString();
  };
</script>